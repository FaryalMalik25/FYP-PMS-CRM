const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const createIssue = require('./create-issue.js');
const createProject = require('./create-project.js');

const deleteIssueByID = require('./delete-issue-by-id.js');
const getIssues = require('./get-issues.js');
const getTransitions = require('./get-transitions.js');
const getUsers = require('./get-users.js');

const  getAllProjectDetails = require('./get-projects.js');
const User = require('./models/User'); // User model
const bcrypt = require('bcryptjs');
const loginRouter = require('./routes/auth.js');
const projectRoutes=require('./routes/projectRoutes.js')
const taskRoutes = require('./routes/taskRoutes');
const listprojects=require('./routes/list-projects.js')
const Invoice=require('./routes/invoices.js')
const clientsRouter = require('./routes/Client.js'); 
const http = require('http');
const paymentRoutes=require('./routes/payment.js')
const UserRoutes=require('./routes/User.js');
const issueRoutes = require('./routes/issues.js');
const message=require('./routes/message.js');

const Message=require('./models/Message.js');
const Notification=require('./models/notification.js')




const cors = require('cors');
require('dotenv').config();
const app = express();

const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(bodyParser.json());


mongoose.connect('mongodb://127.0.0.1:27017/Projects')

  .then(() => console.log("MongoDB connected"))
  .catch(err => console.log(err));

// const createProjectIssueAndUpdate = async () => {

//   const projectName = process.env.PROJECT_NAME
//   const projectKey = await createProject(projectName);
//   console.log(`Created project with key: ${projectKey}`);

//   const issueType = 'Task';
//   const summary = 'Ecommerece Website';
//   const description = 'Do so now!!'

//   const issueKey = await createIssue(projectKey, issueType, summary, description);
//   console.log(`Created issue with key: ${issueKey}`);

//   // Notes about statusID: statusID corresponds to " 11 == "To Do", 21=="In Progress", 31=="In Review", 41=="Done"
//   // for more info on statusID use the `get-transtions.js` file to see all available transitions
//   // since we are hard coding `21` below this means we will update the issue to In Progress
//   const statusID = '21'

//   // Add issueKey you want to update. This will be the key which we autogenerated from the issue above.
//   const update = await updateStatus(issueKey, statusID);
//   console.log(update)
// }
// //This will output the most recent projects
// const getRecentProjects = async () => {
//   const recentProjects = await getProjects();
//   console.log(recentProjects)
// }

// //This will list all issues for a project
// const getIssuesFunc = async () => {
//   const issues = await getIssues();
//   console.log(issues)
// }

// // This will list all transitions for a project, make sure to change the issueKey to correspond
// // with your project! 
// const getTransitionsFunc = async (issueKey) => {
//   const transitions = await getTransitions(issueKey);
//   console.log(transitions)
// }

// const getIssueByIDFunc = async (issueKey) => {
//   const issue = await getIssueByID(issueKey);
//   console.log(issue)
// }

// const deleteIssueByIDFunc = async (issueKey) => {
//   const issue = await deleteIssueByID(issueKey);
//   console.log(issue)
// }

// const updateStatusFunc = async (issueKey, statusID) => {
//   const status = await updateStatus(issueKey, statusID);
//   console.log(status)
// }

// // This will list all users
// const getUsersFunc = async () => {
//   const users = await getUsers();
//   console.log(users)
// }
// getUsersFunc();
// createProjectIssueAndUpdate();

// getIssuesFunc();


// getRecentProjects();


// getIssueByIDFunc('FYYP24-1')

// Optional -- uncomment the function call below to get transitions of a newly created project
// Get transitions - needed to see how to update the status of an issue
// getTransitionsFunc('FYPP24-1')

// updateStatusFunc('FYPP24-1', '41')


// deleteIssueByIDFunc('MF');












app.post('/signup', async (req, res) => {
  const { fname, lname, email, password, role } = req.body;
  
  try {
    const normalizedEmail = email.toLowerCase();
    const userExists = await User.findOne({ email: normalizedEmail });
    if (userExists) {
      return res.status(409).json({ message: 'Email already exists' });
    }
    
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      fname, 
      lname, 
      email: normalizedEmail, 
      password: hashedPassword, 
      role
    });
    await newUser.save();
    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    console.error('Signup Error:', error);
    res.status(500).json({ message: 'Error registering the user' });
  }
});

app.use('/api', taskRoutes);
app.use('/api', listprojects);
app.use( loginRouter);
app.use('/api',projectRoutes);
app.use('/invoices',Invoice);
app.use('/api/clients', clientsRouter);
app.use('/api/payments',paymentRoutes);
app.use('/clients',UserRoutes);
app.use('/api', issueRoutes);


app.use('/api',message);

app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something went wrong!');
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
//mongodb://127.0.0.1:27017/tasks